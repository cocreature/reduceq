fn f(x : Int) -> Int {
  return x + 1;
}
===
Require Import Coq.Lists.List.
Import ListNotations.
Require Import Determinism Misc Notations Preservation Rules Setoid_Equivalence Step Substitutivity Term Typing Util.
Definition example := (tabs TInt ((tvar 0) + (tint 1))).
Lemma example_typing :
  empty_ctx |-- example \in (TArrow TInt TInt).
Proof. unfold example. repeat econstructor; eauto. Qed.
---
extern fn g(x : Int) -> Int {}
fn f(x : Int) -> Int {
 return g(x);
}
===
Require Import Coq.Lists.List.
Import ListNotations.
Require Import Determinism Misc Notations Preservation Rules Setoid_Equivalence Step Substitutivity Term Typing Util.
Definition example g := (tabs TInt (tapp g.[ren (+1)] (tvar 0))).
Lemma example_typing :
  forall g, empty_ctx |-- g \in (TArrow TInt TInt) ->
       empty_ctx |-- example g \in (TArrow TInt TInt).
Proof. unfold example. repeat econstructor; eauto. Qed.
---
extern fn splitWords(doc : Int) -> [Int] {}
fn wordcount(docs : [Int]) -> [Int * Int] {
  words : [Int] = flatMap((doc : Int) => splitWords(doc), docs);
  wordTuples : [Int * Int] = map ((x : Int) => (x, 1), words);
  return reduceByKey((x : Int) (y : Int) => x + y, 0, wordTuples);
}
===
Require Import Coq.Lists.List.
Import ListNotations.
Require Import Determinism Misc Notations Preservation Rules Setoid_Equivalence Step Substitutivity Term Typing Util.
Definition example splitWords :=
  (tabs (TList TInt)
        (tmap
           (tabs (TInt :*: (TList TInt))
                 (tpair
                    (tfst (tvar 0))
                    (tfold
                       (tabs (TInt :*: TInt) ((tfst (tvar 0)) + (tsnd (tvar 0))))
                       (tint 0)
                       (tsnd (tvar 0)))))
           (tgroup (tmap
                      (tabs TInt (tpair (tvar 0) (tint 1)))
                      (tconcat (tmap
                                  (tabs TInt (tapp splitWords.[ren (+1)].[ren (+1)] (tvar 0)))
                                  (tvar 0))))))).
Lemma example_typing :
  forall splitWords, empty_ctx |-- splitWords \in (TArrow TInt (TList TInt)) ->
                empty_ctx |-- example splitWords \in (TArrow
                                                        (TList TInt)
                                                        (TList (TInt :*: TInt))).
Proof. unfold example. repeat econstructor; eauto. Qed.
---
extern fn splitWords(doc : Int) -> [Int] {}
fn wordcount(docs : [Int]) -> [Int * Int] {
  map : [Int * Int] = [];
  for ((doc : Int) : docs) {
    words : [Int] = splitWords(doc);
    for ((word : Int) : words) {
      match map{word} with
      | l : () => { map{word} := 1; }
      | r : Int => { map{word} := r + 1; }
      end
    }
  }
  return map;
}
===
Require Import Coq.Lists.List.
Import ListNotations.
Require Import Determinism Misc Notations Preservation Rules Setoid_Equivalence Step Substitutivity Term Typing Util.
Definition example splitWords :=
  (tabs (TList TInt)
        (tfold
           (tabs ((TList (TInt :*: TInt)) :*: TInt)
                 (tfold
                    (tabs ((TList (TInt :*: TInt)) :*: TInt)
                          (tcase
                             (tread_at_key (tfst (tvar 0)) (tsnd (tvar 0)))
                             (twrite_at_key (tfst (tvar 1)) (tsnd (tvar 1)) (tint 1))
                             (twrite_at_key (tfst (tvar 1)) (tsnd (tvar 1)) ((tvar 0) + (tint 1)))))
                    (tfst (tvar 0))
                    (tapp splitWords.[ren (+1)].[ren (+1)] (tsnd (tvar 0)))))
           (tlist [])
           (tvar 0))).
Lemma example_typing :
  forall splitWords, empty_ctx |-- splitWords \in (TArrow TInt (TList TInt)) ->
                empty_ctx |-- example splitWords \in (TArrow
                                                        (TList TInt)
                                                        (TList (TInt :*: TInt))).
Proof. unfold example. repeat econstructor; eauto. Qed.
