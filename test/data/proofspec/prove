extern fn g(x : Int) -> Int {}
fn f(x : Int) -> Int {
  return g(x);
}
===
extern fn g(x : Int) -> Int {}
fn f(x : Int) -> Int {
  return g(x);
}
===
Require Import Coq.Lists.List.
Import ListNotations.
Require Import Determinism Misc Notations Preservation Rules Setoid_Equivalence Step Substitutivity Term Typing Util.
Definition imperative g := (tabs TInt (tapp g.[ren (+1)] (tvar 0))).
Definition mapreduce g := (tabs TInt (tapp g.[ren (+1)] (tvar 0))).
Lemma imperative_typing :
  forall g, empty_ctx |-- g \in (TArrow TInt TInt) ->
       empty_ctx |-- imperative g \in (TArrow TInt TInt).
Proof. unfold imperative. repeat econstructor; eauto. Qed.
Lemma mapreduce_typing :
  forall g, empty_ctx |-- g \in (TArrow TInt TInt) ->
       empty_ctx |-- mapreduce g \in (TArrow TInt TInt).
Proof. unfold mapreduce. repeat econstructor; eauto. Qed.
Lemma equivalence :
  forall g, empty_ctx |-- g \in (TArrow TInt TInt) ->
       forall arg1 final,
         empty_ctx |-- arg1 \in TInt ->
         (bigstep (tapp (imperative g) arg1) final) ->
         (bigstep (tapp (mapreduce g) arg1) final).
Admitted.
