extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers : [Int * Int] = replicate(length(centers), (0,0));
    new_center_count : [Int] = replicate(length(centers), 0);
    for ((p : Int * Int) : points) {
      min_id : Int = nearestCenter(p, centers);
      new_centers[min_id] := addPoints(new_centers[min_id], p);
      new_center_count[min_id] := new_center_count[min_id] + 1;
    }
    for ((i : Int) : range(0, length(new_centers), 1)) {
      new_centers[i] := div(new_centers[i], new_center_count[i]);
    }
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers : [Int * Int] = replicate(length(centers), (0,0));
    new_center_count : [Int] = replicate(length(centers), 0);
    pointsWithNearest : [(Int * Int) * Int] =
      map((p : Int * Int) => (p, nearestCenter(p, centers)),
          points);
    for ((p_min : (Int * Int) * Int) : pointsWithNearest) {
      new_centers[snd p_min] := addPoints(new_centers[snd p_min], fst p_min);
      new_center_count[snd p_min] := new_center_count[snd p_min] + 1;
    }
    for ((i : Int) : range(0, length(new_centers), 1)) {
      new_centers[i] := div(new_centers[i], new_center_count[i]);
    }
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers_and_count : [(Int * Int) * Int] = zip(replicate(length(centers), (0,0)), replicate(length(centers), 0));
    pointsWithNearest : [(Int * Int) * Int] =
      map((p : Int * Int) => (p, nearestCenter(p, centers)),
          points);
    for ((p_min : (Int * Int) * Int) : pointsWithNearest) {
      new_centers_and_count[snd p_min] :=
        (addPoints(fst new_centers_and_count[snd p_min], fst p_min), snd new_centers_and_count[snd p_min] + 1);
    }
    new_centers : [(Int * Int)] = replicate(length(centers), (0,0));
    for ((i : Int) : range(0, length(new_centers), 1)) {
      new_centers[i] := div(fst new_centers_and_count[i], snd new_centers_and_count[i]);
    }
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers_and_count : [(Int * Int) * Int] = zip(replicate(length(centers), (0,0)), replicate(length(centers), 0));
    pointsWithNearest : [(Int * Int) * Int] =
      map((p : Int * Int) => (p, nearestCenter(p, centers)),
          points);
    for ((p_min : (Int * Int) * Int) : pointsWithNearest) {
      new_centers_and_count[snd p_min] :=
        (addPoints(fst new_centers_and_count[snd p_min], fst p_min), snd new_centers_and_count[snd p_min] + 1);
    }
    new_centers : [(Int * Int)] = map((p : (Int * Int) * Int) => div(fst p, snd p), new_centers_and_count);
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers_and_count : [(Int * Int) * Int] = zip(replicate(length(centers), (0,0)), replicate(length(centers), 0));
    pointsWithNearest : [Int * ((Int * Int) * Int)] =
      map((p : Int * Int) => (nearestCenter(p, centers), (p, 1)),
          points);
    for ((p_min : Int * ((Int * Int) * Int)) : pointsWithNearest) {
      new_centers_and_count[fst p_min] :=
        (addPoints(fst new_centers_and_count[fst p_min],fst(snd(p_min))),
         snd new_centers_and_count[fst p_min] + snd(snd(p_min)));
    }
    new_centers : [(Int * Int)] = map((p : (Int * Int) * Int) => div(fst p, snd p), new_centers_and_count);
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers : [(Int * Int)] =
      map((p : (Int * Int) * Int) => div(fst p, snd p),
        fold((acc : [(Int * Int) * Int] * (Int * ((Int * Int) * Int))) =>
               write(fst acc,
                     fst (snd acc),
                     (addPoints(fst((fst acc)[fst (snd acc)]), fst(snd(snd(acc)))),
                      snd((fst acc)[fst (snd acc)]) + snd(snd(snd(acc))))),
             zip(replicate(length(centers), (0,0)), replicate(length(centers), 0)),
             map((p : Int * Int) => (nearestCenter(p, centers), (p, 1)), points)));
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    local_centers : [Int * Int] = centers;
    new_centers : [Int * ((Int * Int) * Int)] =
      reduceByKey((p1 : (Int * Int) * Int) (p2 : (Int * Int) * Int) =>
                     (addPoints(fst p1, fst p2), snd p1 + snd p2),
                  ((0, 0), 0),
                  map((p : Int * Int) => (nearestCenter(p, local_centers), (p, 1)), points));
    tmp_centers : [(Int * Int) * Int] = zip(replicate(length(centers), (0,0)), replicate(length(centers), 0));
    for ((p : Int * ((Int * Int) * Int)) : new_centers) {
      tmp_centers[fst p] := snd p;
    }
    centers := map ((p : (Int * Int) * Int) => div(fst p, snd p), tmp_centers);
    iter := iter + 1;
  }
  return centers;
}
---
extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
extern fn nearestCenter(p : Int * Int, centers : [Int * Int]) -> Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    local_centers : [Int * Int] = centers;
    new_centers : [Int * Int] =
      map((p : Int * ((Int * Int) * Int)) => div(fst (snd p), snd (snd p)),
          reduceByKey((p1 : (Int * Int) * Int) (p2 : (Int * Int) * Int) =>
                        (addPoints(fst p1, fst p2), snd p1 + snd p2),
                      ((0, 0), 0),
                      map((p : Int * Int) => (nearestCenter(p, local_centers), (p, 1)), points)));
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}