extern fn dist(a : Int * Int, b : Int * Int) -> Int {}
extern fn addPoints(a : Int * Int, b : Int * Int) -> Int * Int {}
extern fn div(a : Int * Int, b : Int) -> Int * Int {}
fn kmeans(points : [Int * Int], centers : [Int * Int]) -> [Int * Int] {
  iter : Int = 0;
  while (iter < 10) {
    new_centers : [Int * Int] = centers;
    new_center_count : [Int] = [];
    i : Int = 0;
    while (i < length(points)) {
      min_id : Int = 0;
      min_dist : Int = dist(points[i], centers[0]);
      j : Int = 1;
      while (j < length(centers)) {
        d : Int = dist(points[i], centers[j]);
        if (d < min_dist) {
          min_dist := d;
          min_id := j;
        }
        j := j + 1;
      }
      new_centers[min_id] := addPoints(new_centers[min_id], points[i]);
      new_center_count[min_id] := new_center_count[min_id] + 1;
      i := i + 1;
    }
    i := 0;
    while (i < length(new_centers)) {
      new_centers[i] := div(new_centers[i], new_center_count[i]);
      i := i + 1;
    }
    centers := new_centers;
    iter := iter + 1;
  }
  return centers;
}
