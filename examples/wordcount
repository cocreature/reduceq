fn wordcount(words : [Int]) -> [Int * Int] {
  m : [Int * Int] = [];
  for ((word : Int) : words) {
    match m{word} with
    | l : () => { m{word} := 1; }
    | r : Int => { m{word} := r + 1; }
    end
  }
  return m;
}
---
fn wordcount(words : [Int]) -> [Int * Int] {
  m : [Int * Int] = [];
  for ((word : Int) : words) {
    val : Int = 0;
    match m{word} with
    | l : () => { val := 1; }
    | r : Int => { val := r + 1; }
    end
    m{word} := val;
  }
  return m;
}
---
fn wordcount(words : [Int]) -> [Int * Int] {
  wordTuples : [Int * Int] = map ((x : Int) => (x, 1), words);
  return reduceByKey((x : Int) (y : Int) => x + y, 0, wordTuples);
}
